#!/bin/bash
name="Trufi Multi-Instance Server"
name_single="Trufi Server"
filesDir="files"

module_name="Trufi Server Modules"
module_url="https://github.com/trufi-association/trufi-server-modules"
module_dir="./trufi-server-modules"
module_dir_renamed="modules"

hostname=`hostname`

if [ -z `which git` ]; then
	echo -e "\033[1;31mError: 'git' is missing on this system. Please install it as it is a requirement!\033[0;m">$2
	exit 1
fi

greenecho() {
	echo -e "\033[1;36m$1\033[0;m"
}

orangeecho() {
	echo -e "\033[1;33m$1\033[0;m"
}

blueecho() {
	echo -e "\033[1;34m$1\033[0;m"
}

checkDecision() {
	if ! [ "$1" = "$2" ]; then
		greenecho "aborting setting up '$name' ..."
		echo -e "\033[1;34mIf you change your mind then execute me again\033[0;m"
		exit 0
	fi

}


greenecho "###################################################"
greenecho "      Setup for '$name'      "
greenecho "###################################################"

blueecho "1. Download modules"
echo "This script will clone a copy of '$module_name' which contains the necessary modules needed to run services for cities"
echo "After cloning you will be asked some questions needed to do the initial setup."
echo "--------------------------------------------"
echo "DEVELOPER ATTENTION!"
echo "All modules are fetched from '$module_name' (a git repository). Propose changes to them there and not here."
echo "- Do not make changes to the modules. We will reject PR's containing them. If you want to develop around the 'copy' then please fork $module_url and work on it. Systematic changes which this structure needs will be applied by the subsequent 'modifyComposes' script."
echo "- If you want to make changes to this init script or to the contents in the directory 'files' then you are free to do so on your own fork! We encourage you to make PR's."
echo " - If you make changes to any or both projects we encourage you to upstream them by opening a PR. Your change can be useful and can improve our projects :)"
echo "--------------------------------------------"
echo 
maxcount=3
for i in {1..2}; do
	echo -ne "showing prompt in $((maxcount - i)) ...\033[0K\r" # https://stackoverflow.com/questions/5861428/bash-script-erase-previous-line
	sleep 1
done
echo -e "Do you want to process? (y|n):\033[0;34m"
read decision
checkDecision $decision "y"
echo -en "\033[0;m"

if ! [ -d "$module_dir_renamed" ]; then
	orangeecho "   cloning '$module_name' ..."
	git clone $module_url
	if ! [ -d "$module_dir" ]; then
		echo "Error: Clone of '$module_url' failed! Do I have internet access or the necessary write permission to the local filesystem?">&2
		exit 1
	fi
else
	module_dir=$module_dir_renamed
fi

# prevents from accidentally committing and uploading changes made by this script
orangeecho "   prevent users from accidentally uploading their changes in '$module_name' to git ..."
rm -R $module_dir/.git --force

orangeecho "   renaming '$module_dir' to '$module_dir_renamed' ..."
mv $module_dir $module_dir_renamed
module_dir=$module_dir_renamed

orangeecho "   removing incompactible modules ..."
rm -r $module_dir/nginx-*

python3 modifyComposes.py

greenecho "   Modules downloaded!"
blueecho "2. Specify environment"
echo -e "Choose environment [prod|dev]:\033[0;34m"
read decision
echo -ne "\033[0;m"
if [ $decision = "prod" ]; then
	environment="production"
	ENVIRONMENT="PRODUCTION"
	nginxconf="./nginx/app.template.conf"
	intraweb="yes"
elif [ $decision = "dev" ]; then
	environment="development"
	ENVIRONMENT="DEVELOPMENT"
	nginxconf="./nginx/app.dev.conf"
	intraweb="no"
else
	redecho "Error: invalid input"
	exit 1
fi

blueecho "3. Specify mode"

MODE_REALDOMAINS="real domains"
MODE_VIRTUALDOMAINS="virtual domains"
CURMODE=""

virtualdomains_locationblock="	location \/ \{ proxy_pass \$backendpathinterweb \; \# mark675 \}"

echo "CHOSSE THE MODE TO OPERATE IN"
echo "---------------------------------------------------"
echo "You can operate the backend in two different modes!"
echo "---------------------------------------------------"
echo "Mode '$MODE_VIRTUALDOMAINS':"
echo "  - allows you to operate all backends for all different cities under **one** subdomain e.g. 'app.example.com"
echo "  - A script internally converts uris like 'http(s)://app.example.com/dehh/tileserver' to 'http://tileserver-dehh' so it tries to guess the name of the docker container to use based on the uri given by the client."
echo "  - limiations:"
echo "    - are not free in custom nginx configurations to use e.g. you cannot set additional headers"
echo "    - most webportals of the extensions will stop working correctly or will not work at all (if you use them)"
echo "  - NON STANDARD"
echo "    - this mode virtualizes subdomains by moving them from e.g. 'tileserver.dehh.example.com' to the url part e.g. 'app.example.com/dehh/tileserver where 'app' is the subdomain. But that is against the philosophy of using a domain."
echo "    - Normally using subdomains DON'T cause any extra costs and also using wildcard SSL certificates they don't add to the complexity."
echo "    - If you want to run extensions but only have them accessible on localhost then don't use this mode!"
echo
echo "MODE '$MODE_REALDOMAINS' (recommended and selected as default):"
echo "  - allows you to use different subdomains for each city/region you operate extension instances for e.g. 'dehh.example.com' for Hamburg in Germany and 'brrecife.example.com' for Recife in Brazil."
echo "  - STANDARD"
echo "    - this is aligned to the idea of having subdomains"
echo "    - we use this mode on our own backend server"

maxcount=3
for i in {1..2}; do
	echo -ne "showing prompt in $((maxcount - i)) ...\033[0K\r" # https://stackoverflow.com/questions/5861428/bash-script-erase-previous-line
	sleep 1
done

echo "Just hit enter without typing anything to choose the default."
echo -e "Choose the mode? ($MODE_REALDOMAINS|$MODE_VIRTUALDOMAINS):\033[0;34m "
read decision
echo -ne "\033[0;m"
if [ "$decision" = "" ]; then # default chosen
	decision="$MODE_REALDOMAINS"
fi
if [ "$decision" = "$MODE_REALDOMAINS" ]; then
	CURMODE=$MODE_REALDOMAINS
elif [ "$decision" = "$MODE_VIRTUALDOMAINS" ]; then
	CURMODE=$MODE_VIRTUALDOMAINS
else
	redecho "Error: invalid input"
	exit 1
fi

blueecho "4. Save & load configuration"
# save
echo "env=\"$environment\"
curmode=\"$CURMODE\"
intraweb=\"$intraweb\"">"./data/instance.conf"
# load
source ./lib/env

blueecho "5. NGINX configuration"
orangeecho "   preparing nginx configuration ..."
dest="./data/nginx/interweb/virtualdomains.conf"
if ! [ -f "$dest" ] && [ "$CURMODE" = "$MODE_VIRTUALDOMAINS" ]; then
	if [ "$enviroment" = "production" ]; then
		echo "Please tell me the domain name. This can be changed later by editing the '$dest' file"
		read decision
		orangeecho "     Setting domain '$decision' ..."
		destcontent=`echo "$destcontent" | sed "s/example.org/$decision/"`
		domain="$decision"
	else
		orangeecho "     Setting domain '$hostname' since we are in 'development' mode (this can be changed later by editing the '$dest' file) ..."
		destcontent=`echo "$destcontent" | sed "s/example.org/$hostname/"`
		domain="$hostname"
	fi
	orangeecho "     adding $environment virtual server ..."
	sed "s/# modules/# modules of all cities all using this single virtual server configuration\ninclude \/etc\/nginx\/interweb\/*\/\*.conf\;/" "$nginxcityconf_template_interweb" | sed "s/example.org/$domain/g" > "$dest"
	mkdir -p "./data/logs/nginx/$domain"

elif [ "$CURMODE" = "$MODE_REALDOMAINS" ]; then
	greenecho "     doing something with nginx configurations before adding a city is not necessary. Skipping this step!"
fi

#orangeecho "   generating 4096bit dhparam ..."
#openssl dhparam -out ./data/nginx/inc/dhparam.pem 4096

greenecho "#################### END ################################"
greenecho "[DONE]   Setup for '$name'   "
greenecho "#################### END ################################"
echo
greenecho "Current configuration:"
echo "Environment       : $environment"
echo "Mode              : $CURMODE"
echo "Domain            : $domain"
echo "Intraweb activated: $intraweb"
echo "Ability to host services for multiple cities"
echo

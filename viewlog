#!/bin/bash
# makes sense for production only
# ./viewlog <mandants' name> <modulename> <servicename> [<moreargs>]

args=( $@ )

source ./lib/singlenv
source ./lib/colorful
source ./lib/utils
projectname=`basename "$PWD"`

# ./viewlog [<mandants' name>] [<modulename>] <servicename> [<moreargs>]
#           ..................
envfile="${args[0]/'.env'/''}.env"
if [ -f "./config/$envfile" ]; then # export the variables in the mandant configuration file
	blueecho "performing some checks & normalizations ..."
	source ./lib/validation
fi
# ./viewlog <mandants' name> <modulename> <servicename> [<moreargs>]
#                            ............
modulename="${args[0]}"
removeFirstElemInArgs
if [ -n "$mandant" ]; then
	if ! [ -d "modules/$modulename" ]; then
		redecho "Error: You specified an invalid name of a module to read log from">&2
		echo "A list of modules available:"
		ls -p ./modules | grep -v /
	fi
fi

# ./viewlog <mandants' name> <modulename> <servicename> [<moreargs>]
#                                         .............
servicename="${args[0]}"
removeFirstElemInArgs
	
## remove the '<modulename>'' prefix from the console input '<servicename>' if the user has entered it. The prefix will be automatically added later
serviceprefix="${modulename}-"
servicename=${servicename/$serviceprefix/""}

if [ -n "$mandant" ]; then
	cd "modules/$modulename"
	allServices=`sudo $DOCKER_COMPOSE -p "$projectname" -f "${mandant}.yml" config --services`
	cd "../../"
else
	serviceame="${args[0]}"
	removeFirstElemInArgs
	allServices=`sudo $DOCKER_COMPOSE -p "$projectname" -f "docker-compose.yml" config --services`
fi
if [ -z `echo $allServices | grep $servicename` ]; then
	redecho "Error: You specified an invalid name of a service in module '$modulename' to read log from">&2
	echo "A list of services in that module available:"
	echo "$allServices"
fi


# ./viewlog <mandants' name> <modulename> <servicename> [<moreargs>]
#                                                       ............
if [ ${#args[@]} -eq 0 ]; then
	args+=( "--since today --follow" )
fi
arguments="${args[@]}"

# determining full qualified container name
containername="${projectname}.${modulename}-${servicename}"
if [ -n "$mandant" ]; then
	containername+="-${mandant,,}"
fi
namesOfAllContainers=`sudo docker container ls --all --format "{{.Names}}"`
containername=`echo "$namesOfAllContainers" | grep $containername`

# Executing journalctl command to get the logs
orangeecho "Executing 'sudo journalctl CONTAINER_NAME=\"${containername}\" $arguments'"
sudo journalctl CONTAINER_NAME="${containername}" $arguments

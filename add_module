#!/bin/bash

projectname=`basename "$PWD"`

source ./lib/env
source ./lib/singlenv
source ./lib/colorful

blueecho "1. perform some checks & normalizations ..."
source ./lib/validation

compileCompose() {
	blueecho "Add module '$modulename' to mandant '$mandant'"

	if ! [ -f "$moduleDir/docker-compose.yml" ]; then
		echo "   doing this makes no sense as the template file '$moduleDir/docker-compose.yml' does not exist!"
		return
	fi

	# 1. Generate a docker-compose for the mandant (if not already existing)
	ymlFile="$moduleDir/$mandant.yml"
	ymlFileInactive="$ymlFile.inactive"

	if ! [ -f "$ymlFileInactive" ] && ! [ -f "$ymlFile" ]; then
		orangeecho "   building & adding in directory '$moduleDir' ) ..."
		(source ./$mandantFile ;
		if [ -n "$city" ]; then
			export mandant="$city"
		fi ; export projectname="$projectname" ; export city_normalize="${mandant,,}" ; export mandant_normalize="${mandant,,}" ;  
		. ./lib/envsubst < $moduleDir/docker-compose.yml > "$ymlFile" )
		if ! [ -f "$ymlFile" ]; then
			redecho "     Creating & adding operation failed! Do I have write access to '$moduleDir'?">&2
			exit 1
		fi
		if [ -d "$moduleDir/data_template" ]; then
			cp -R "$moduleDir/data_template" "$moduleDir/data_$mandant"
		fi
	elif [ -f "$ymlFileInactive" ]; then
		orangeecho "   adding ..."
		mv "$ymlFileInactive" $ymlFile --verbose
		if ! [ -f "$ymlFile" ]; then
			redecho "     Adding failed! Do I have write access to '$ymlFileInactive'?">&2
			exit 1
		fi
	else
		greenecho "   already added. No need to do it again :)"
	fi
}

interwebConfiguration() {
	# 2. Prepare interweb configuration
	blueecho "Add interweb nginx configuration"
	orangeecho "   adding nginx configuration for '$modulename' to mandant '$mandant' ..."
	
	# This folder to be created somewhere under './data' is necessary to be able to store all nginx reverse proxy configurations for '$mandant' e.g. 'Germany-Hamburg'
	nginxMandantFolder="./data/nginx/interweb/$mandant" # e.g. './data/nginx/interweb/Germany-Hamburg'
	# This file to be created will contain the altered nginx server configuration for '$mandant' e.g. 'Germany-Hamburg'
	nginxMandantConf="$nginxMandantFolder.conf" # e.g. './data/nginx/interweb/Germany-Hamburg.conf'
	# This file to be created will contain the altered nginx reverse proxy configuration for the module '$modulename' e.g. 'tileserver' 
	nginxMandantModuleConf="$nginxMandantFolder/$modulename.conf" # e.g. './data/nginx/interweb/Germany-Hamburg/tileserver.conf'
	# This file ensures that traffic redirection to that module works
	moduleNginxConf="$moduleDir/nginx.conf" # e.g. './modules/tileserver/nginx.conf'

	# if a nginx reverse proxy configuration exists for this module
	if [ -f "$moduleNginxConf" ]; then # read it into memory (to be able to alter it later)
		moduleNginxConfContent=`cat "$moduleNginxConf"`
		moduleNginxConfContent=`
source ./$mandantFile
export projectname="$projectname"
export modulename="$modulename"
export city_normalize="${mandant,,}"
export mandant_normalize="${mandant,,}"
echo "$moduleNginxConfContent" | . ./lib/envsubst`
	else
		# if no module nginx reverse configuration exists then abbort
		return
	fi

	# If that folder does not exist
	if ! [ -d "$nginxMandantFolder" ]; then # create it
		orangeecho "     creating nginx server configuration folder for mandant '$mandant' ..."
		mkdir "$nginxMandantFolder"
	fi
	
	# 3. Generating nginx server configuration
	orangeecho "     completing nginx server configuration for mandant '$mandant' ..."
	# if in real domains mode and if the file '$nginxMandantConf' does not exist already
	if [ "$curmode" = "$MODE_REALDOMAINS" ] && ! [ -f "$nginxMandantConf" ]; then # take the template file at $nginxMandantConfTemplateInterweb and make modifications
		# - to include all *.conf files in '$nginxMandantFolder'
		# - and to just be applied for the domain assigned to '$mandant'
		sed "s/# modules/# real domain include location blocks for mandant '$mandant'\ninclude \/etc\/nginx\/interweb\/$mandant\/\*.conf\;/" "$nginxMandantConfTemplateInterweb" | sed "s/example.org/$domain/g" > "$nginxMandantConf"
	elif ! [ -f "$nginxMandantConf" ]; then # or if in virtual domain mode then just create the file '$nginxMandantConf' containing the include statement to include all *.conf files in '$nginxMandantFolder'
		echo "include /etc/nginx/interweb/$mandant/*.conf;" > "$nginxMandantConf"
	else
		greenecho "       already done. No need to do it again :)"
	fi

	# 4. Generating nginx module configuration
	orangeecho "     copying & altering nginx module configuration for module '$modulename' to nginx server configuration for mandant '$mandant' ..."
	if ! [ -f "$nginxMandantModuleConf" ]; then
		# search for pattern 'http://otp:' or 'http://otp;' or 'http://otp/'
		# and replace it with 'http://otp-$mandant:' or 'http://otp-$mandant;' or 'http://otp-$mandant/'
		# e.g. 'http://otp-germany-hamburg:' or 'http://otp-germany-hamburg;' or 'http://otp-germany-hamburg/' (lower case because of '${mandant,,}')
		moduleNginxConfContent=`echo "import re
txt = \"\"\"$moduleNginxConfContent\"\"\"
print(re.sub(\"http\:/\/(.*?)(:|;|\/)\",\"http://${modulename}-\\\\\\1-${mandant,,}\\\\\\2\", txt, re.S))
" | python3`
		# if in virtual domains mode
		if [ "$curmode" = "$MODE_VIRTUALDOMAINS" ]; then # do the following additional modifications to all location blocks to
			# change their urls e.g. from '/tileserver' to '/Germany-Hamburg/tileserver' (no lower case here)
			moduleNginxConfContent=`echo "$moduleNginxConfContent" | sed -E "s/location \/(.+?)/location \/$mandant\/\1/g" | sed -E "s/return (.+?) \/(.*?)/return \1 \/$city\/\2/g"`
		fi
		echo "$moduleNginxConfContent" > "$nginxMandantModuleConf"
	else
		greenecho "       already generated. No need to do it again :)"
	fi
}

prepareLogging() {
	# 5. Logging
	orangeecho "   creating logging structure ..."
	if ! [ -d "./data/logs/nginx/$domain" ]; then
		mkdir -p "./data/logs/nginx/$domain" --verbose
	else
		greenecho "     not necessary as already existing :)"
	fi
}

intrawebConfiguration() {
	# 6. Intraweb configuration
	if [ "$intraweb" = "yes" ]; then
		blueecho "Add intraweb nginx configuration ..."
		
		if ! [ -f "$moduleDir/docker-compose.yml" ]; then
			echo "   doing this makes no sense as the template file '$moduleDir/docker-compose.yml' does not exist!"
			return
		fi

		orangeecho "   adding nginx configuration for '$modulename' for mandant '$mandant' ..."
		
		nginxMandantFolder="./data/nginx/intraweb/$mandant"
		nginxMandantConf="$nginxMandantFolder.conf"
		
		orangeecho "     creating nginx server configuration folder for mandant '$mandant' ..."
		if ! [ -d "$nginxMandantFolder" ]; then
			mkdir "$nginxMandantFolder"
		fi
		
		orangeecho "     completing nginx configuration for mandant '$mandant' ..."
		if ! [ -f "$nginxMandantConf" ]; then
			echo "include /etc/nginx/intraweb/$mandant/*.conf ;" > "$nginxMandantConf"
		else
			greenecho "     not necessary as already completed :)"
		fi
		
		orangeecho "     adding intraweb server for module '$modulename' for mandant '$mandant'"
		cd modules/$modulename
		allServices=`sudo $DOCKER_COMPOSE -f "${mandant}.yml" config --services`
		allServices=( $allServices )
		cd ../../
		# iterate through names of all services of that mandant in the module
		for servicename in "${allServices[@]}"; do
			orangeecho "       - $servicename ..."
			nginxMandantModuleConf="$nginxMandantFolder/$servicename.conf"
			if ! [ -f "$nginxMandantModuleConf" ]; then
				# take content from template in file 'nginxDockerServiceConfTemplateInterweb' and modify it to
				# - be just applied to a specified autogenerated intraweb domain
				# - and to replace all occurrence of 'modulename-mandant' with the name of the container e.g. to 'tileserver-tileserver-germany-hamburg'
				#                                                                                      Syntax: <modulename>-<servicename>-<mandant>
				sed -E "s/localhost/$servicename.localhost/" "$nginxDockerServiceConfTemplateInterweb" | sed "s/modulename-city/$servicename/" > "$nginxMandantModuleConf"
			else
				greenecho "         not necessary as already existing  :)"
			fi
		done
	fi
}

addModule() {
	modulename="$1"

	compileCompose
	interwebConfiguration
	prepareLogging
	intrawebConfiguration

	source "lib/plugin"
	invokeAllPluginsOf "add_module"

	blueecho "Wiring up module '$modulename' for mandant '$mandant'"
	./server "${mandant}" up "$modulename"
	
	greenecho "Added trufi module '$modulename' to mandant '$mandant'!"
}

moduleNotFound=""
for module in "${args[@]}"; do
	moduleDir="./modules/$module"
	#if $modulename is empty or $moduleDir does not exist
	if [ -z "$module" ]; then
		continue
	fi
	if ! [ -d "$moduleDir" ]; then
		moduleNotFound="true"
		continue
	fi
	echo
	addModule "$module"
done
if ! [ -z "$moduleNotFound" ]; then
	redecho "Error: You specified an invalid name of a module to add to mandant '$mandant'">&2
	echo "A list of modules available:"
	ls -p ./modules | grep -v /
	exit 1
fi

./server reload nginx

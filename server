#!/bin/bash

source ./lib/colorful
source ./lib/env

# Run added extensions (this will be automatically normalized to 'up --detach' before passing to docker-compose)
# ---------------------
# server run

# Stop added extensions
# ---------------------
# server stop

# View running containers
# ---------------------
# server ls

# Restart added extensions
# ---------------------
# server restart

# Shut down added extensions
# ---------------------
# server down

# Pause added extensions
# ---------------------
# server pause

# Unpause added extensions
# ---------------------
# server unpause

# other commands that docker-compose accepts

args=( $@ )
operateInScope=""

declare -A added_city_extensions
extension_dockercompose_city="$city.yml"

body=()
projectname=`basename "$PWD"`
action="$1"
customCode=""
customDisplay=""

unset $1

# if the first argument is a valid city configuration file and provided in the form 'Country-City' or 'Country-City.env'
if [ -f "./config/${args[0]/'.env'/''}.env" ]; then # export the variables in the city configuration file
	export $(cat ../$envfile | xargs)
fi

if [ -z "$city" ]; then
	echo "operating in global scope because no city configuration were found. Commands affect all added extensions in all cities"
	maxcount=6
	for i in {1..5}; do
		echo -ne "\033[0;36mexecuting command '$action' in $((maxcount - i))\033[0K\r\033[0;m" # https://stackoverflow.com/questions/5861428/bash-script-erase-previous-line
		sleep 1
	done
	operateInScope="global"
	cityrelatedtext="in all cities"
	# list all added extensions in all cities
	function listAddedExtensions() {
		for item in `dir "$1"`;
		do
			local addedExtensions=""
			for content in `dir "$1/$item"`;
			do
				if ! [ "$content" == "docker-compose.yml" ] && [[ "$content" == *.yml ]] && [ -f "$1/$item/$content" ]; then
					addedExtensions+=" -f $content"
				fi
			done
			if [ -n "$addedExtensions" ]; then
				added_city_extensions[$item]="$addedExtensions"
			fi
		done
	}
else
	operateInScope="city"
	cityrelatedtext="in city '$city'"
	# list all added extensions for the current city
	function listAddedExtensions() {
		for item in `dir "$1"`;
		do
			if [ -f "$1/$item/$extension_dockercompose_city" ]; then
				added_city_extensions[$item]="-f $extension_dockercompose_city"
			fi
		done
	}
fi


_donothing() {
	return 0
}

_ls() {
	heading=()
	line=1
	IFS="
"
	result=`sudo docker container ls`
	result=( $result )
	for i in "${result[@]}"; do
		if (( $line > 1 )); then
			belongstoproject=`echo $i | grep "$projectname" | grep "$city"`
			isNginx=`echo $i | grep "$projectname" | grep "nginx"`
			if [ -n "$belongstoproject" ] || [ -n "$isNginx" ]; then
				body+=($i)
			fi
		else
			heading+=($i)
		fi
		line=$(($line+1))
	done
	
	printArrayLineByLine
}

printArrayLineByLine() {
	for i in "${heading[@]}"; do
		echo "$i"
	done

	for i in "${body[@]}"; do
		echo "$i"
	done

}


if ! [ "$operateInScope" = "global" ]; then
	blueecho "performing some checks & normalizations ..."
	source ./lib/validation
fi

if [ "$action" = "run" ] || [ "$action" = "up" ]; then
	orangeecho "deprefixing command to a valid docker-compose command ..."
	action="up --build --detach"
	unset $2
elif [ "$action" = "ls" ]; then
	orangeecho "list the running containers of each extension $cityrelatedtext all at once (nginx will be always included) ..."
	action="ps"
	customCode="_donothing"
	customDisplay="_ls"
elif [ "$action" = "log" ] || [ "$action" = "viewlog" ] ; then
	redecho "Action '$action' no longer supported..."
# 	extension="$2"
# 	unset $2
# 	./viewlog $extension $@
# 	exit 0
fi

listAddedExtensions "extensions" # the directories in 'extensions' represent the names of the extensions

cd extensions
for extension in ${!added_city_extensions[@]}; do
	cd "$extension"
	
	if [ -z "$customCode" ]; then
		orangeecho "performing desired action '$action' on extension '$extension' $cityrelatedtext ..."
		#echo "sudo docker-compose -p \"$projectname\" ${added_city_extensions[$extension]} $action"
		sudo docker-compose -p "$projectname" ${added_city_extensions[$extension]} $action
	else
		eval $customCode "${added_city_extensions[$extension]}" "$action"
	fi
	
	cd ../
done
cd ../

if [ -z "$customCode" ]; then
	appendTXT=""
	if [ "$action" = "down" ]; then
		appendTXT="because there is no container for any city running "
	fi
	# if $action is not "down" then the statement after '&&' will not get evaluated and thus saves processing time
	# "$action" = "down"                                       - No explanation necessary
	
	# `sudo docker container ls | grep "$projectname" | wc -l` - Get running containers containing $projectname in their name and count them
	#    sudo docker container ls                              - List all running containers on this system
	#                             grep "$projectname"          - only show running containers containing $projectname in their name
	#                                                  wc -l   - count the lines returned by the last command
	
	# sudo docker-compose -f "docker-compose.yml" ps -q | wc -l`   - Get running containers belonging to "docker-compose.yml" and count them
	#    sudo docker-compose -f "docker-compose.yml" ps -q         - Get the ids of the containers belonging to "docker-compose.yml"
	#                                                 wc -l    - count the lines returned by the last command
	
	if [ "$action" = "down" ] && [ `sudo docker container ls | grep "$projectname" | wc -l` -gt `sudo docker-compose -f "docker-compose.yml" ps -q | wc -l` ]; then
		blueecho "Not turning down 'nginx' as this is what running containers from other cities depend on!"
	else
		orangeecho "performing desired action '$action' on docker-compose.yml $appendTXT..."
		sudo docker-compose -p "$projectname" -f "docker-compose.yml" --env-file ./$cityfile $action
	fi
else
	eval $customCode $action
fi

if [ -n "$customDisplay" ]; then
	eval $customDisplay
fi

# old command (not working anymore):
# ---------------------
#sudo docker-compose -f $maincomposefile ${composeFiles[@]} --env-file ./config.env $action

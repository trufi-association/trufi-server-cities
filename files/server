#!/bin/bash

source ./lib/colorful

# Run added extensions (this will be automatically normalized to 'up --detach' before passing to docker-compose)
# ---------------------
# server run

# Stop added extensions
# ---------------------
# server stop

# View running containers
# ---------------------
# server ls

# Restart added extensions
# ---------------------
# server restart

# View log of an extension (this will just redirect to our 'viewlog' script)
# ---------------------
# server log <extension name>

# Shut down added extensions
# ---------------------
# server down

# Pause added extensions
# ---------------------
# server pause

# Unpause added extensions
# ---------------------
# server unpause

# other commands that docker-compose accepts

args=( $@ )
envname=""

body=()
projectname=`basename "$PWD"`
action="$1"
customCode=""
customDisplay=""

added_extensions=()
extension_dockercompose_original="docker-compose.yml"
extension_dockercompose_city="$city.yml"
extension_dockercompose="$extension_dockercompose_original"
maincomposefile=""
color="\033[0;33m"
reset="\033[0;m"

unset $1

environment=""
# see https://riptutorial.com/bash/example/6886/associative-arrays
declare -A envs
envs[production]="./data/nginx/app.conf"
envs[development]="./dev/app.conf"
declare -A maincomposefiles
maincomposefiles[production]="docker-compose.yml"
maincomposefiles[development]="docker-compose.dev.yml"

if [ -d "./data/certbot" ]; then
	environment="production"
else
	environment="development"
fi

maincomposefile="${maincomposefiles[$environment]}"

_donothing() {
	return 0
}

_ls() {
	heading=()
	line=1
	IFS="
"
	result=`sudo docker container ls`
	result=( $result )
	for i in "${result[@]}"; do
		if (( $line > 1 )); then
			if [ "$1" = "all" ]; then
				belongstoproject=`echo $i | grep "$projectname"`
			else
				belongstoproject=`echo $i | grep "$projectname" | grep "$city"`
			fi
			isNginx=`echo $i | grep "$projectname" | grep "nginx"`
			if [ -n "$belongstoproject" ] || [ -n "$isNginx" ]; then
				body+=($i)
			fi
		else
			heading+=($i)
		fi
		line=$(($line+1))
	done
	
	printArrayLineByLine
}

_lsall() {
	ls "all"
}

printArrayLineByLine() {
	for i in "${heading[@]}"; do
		echo "$i"
	done

	for i in "${body[@]}"; do
		echo "$i"
	done

}


if ! [ "$action" = "lsall" ]; then
	blueecho "performing some checks & normalizations ..."
	source ./lib/validation
fi

if [ "$action" = "run" ] || [ "$action" = "up" ]; then
	orangeecho "deprefixing command to a valid docker-compose command ..."
	action="up --detach"
	unset $2
elif [ "$action" = "ls" ]; then
	orangeecho "list the running containers of each extension of environment '$city' all at once (nginx will be always included) ..."
	action="ps"
	customCode="_donothing"
	customDisplay="_ls"
elif [ "$action" = "lsall" ]; then
	orangeecho "list the running containers of all environments ..."
	action="ps"
	customCode="_donothing"
	customDisplay="_lsall"
elif [ "$action" = "log" ] || [ "$action" = "viewlog" ] ; then
	echo -e "${color}redirecting to 'viewlog' script ...${reset}"
	extension="$2"
	unset $2
	./viewlog $extension $@
	exit 0
fi

# list all added extensions for the current environment
function listAddedExtensions() {
	for item in `dir "$1"`;
	do
		if [ -f "$1/$item/$extension_dockercompose_city" ]; then
			added_extensions+=( "$item" )
		fi
	done
}

listAddedExtensions "extensions" # the directories in 'extensions' represent the names of the extensions. Only their named will be added to the $added_extensions list

cd extensions
for extension in ${added_extensions[@]}; do
	cd "$extension"
	
	if [ -z "$customCode" ]; then
		orangeecho "performing desired action '$action' on extension '$extension' in environment '$city'..."
		sudo docker-compose -p "$projectname" -f $extension_dockercompose_city --env-file ../../$envfile $action
	else
		eval $customCode $extension_dockercompose $action
	fi
	
	cd ../
done
cd ../

if [ -z "$customCode" ]; then
	appendTXT=""
	if [ "$action" = "down" ]; then
		appendTXT="because there is no container for any city running "
	fi
	# if $action is not "down" then the statement after '&&' will not get evaluated and thus saves processing time
	# "$action" = "down"                                       - No explanation necessary
	
	# `sudo docker container ls | grep "$projectname" | wc -l` - Get running containers containing $projectname in their name and count them
	#    sudo docker container ls                              - List all running containers on this system
	#                             grep "$projectname"          - only show running containers containing $projectname in their name
	#                                                  wc -l   - count the lines returned by the last command
	
	# sudo docker-compose -f $maincomposefile ps -q | wc -l`   - Get running containers belonging to $maincomposefile and count them
	#    sudo docker-compose -f $maincomposefile ps -q         - Get the ids of the containers belonging to $maincomposefile
	#                                                 wc -l    - count the lines returned by the last command
	
	if [ "$action" = "down" ] && [ `sudo docker container ls | grep "$projectname" | wc -l` -gt `sudo docker-compose -f $maincomposefile ps -q | wc -l` ]; then
		blueecho "Not turning down 'nginx' as this is what running containers from other environments depend on!"
	else
		orangeecho "performing desired action '$action' on $maincomposefile $appendTXT..."
		sudo docker-compose -p "$projectname" -f $maincomposefile --env-file ./$envfile $action
	fi
else
	eval $customCode $maincomposefile $action
fi

if [ -n "$customDisplay" ]; then
	eval $customDisplay
fi

# old command (not working anymore):
# ---------------------
#sudo docker-compose -f $maincomposefile ${composeFiles[@]} --env-file ./config.env $action

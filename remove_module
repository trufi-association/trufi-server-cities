#!/bin/bash

projectname=`basename "$PWD"`

source ./lib/env
source ./lib/singlenv
source ./lib/colorful

# Removes all occurrence of a configuration e.g. to make intraweb work
# removeNGINXconf <folder in 'data/nginx' to operate on> <modulename>
# e.g. removeNGINXconf intraweb tileserver
removeNGINXconf() {
	local modulename="$2"
	if [ -f "./data/nginx/${1}/${mandant}/${modulename}.conf" ]; then
		orangeecho "   removing nginx configuration of module '$modulename' from nginx mandant config for '$mandant'  ..."
		rm "./data/nginx/${1}/${mandant}/${modulename}.conf" --verbose
	fi

	if [ -d "./data/nginx/${1}/${mandant}" ] && [ -z `ls "./data/nginx/${1}/${mandant}"` ]; then
		orangeecho "   removing nginx configuration of mandant '$mandant' because it's empty now ..."
		rm -R "./data/nginx/${1}/${mandant}" --verbose
		if [ -f "./data/nginx/${1}/${mandant}.conf" ]; then
			orangeecho "   completing removal of nginx configuration for mandant '$mandant' ..."
			rm "./data/nginx/${1}/${mandant}.conf" --verbose
		fi
	fi
}

blueecho "1. perform some checks & normalizations"
source ./lib/validation

removeModule() {
	local modulename="$1"

	blueecho "1. Turning down module '$modulename' of mandant '$mandant'"
	./server "$mandant" down "$modulename"
	
	blueecho "2. remove interweb nginx configuration"
	removeNGINXconf "interweb" "$modulename"
	if [ "$intraweb" = "yes" ]; then
		blueecho "3. remove intraweb nginx configuration"
		cd modules/$modulename
		allServices=`sudo $DOCKER_COMPOSE -f "${mandant}.yml" config --services`
		allServices=( $allServices )
		cd ../../
		# iterate through names of all services of that mandant in the module
		for servicename in "${allServices[@]}"; do
			removeNGINXconf "intraweb" "$servicename"
		done
	fi
	
	source "lib/plugin"
	invokeAllPluginsOf "remove_module"

	blueecho "4. deactivate module '$modulename' in mandant '$mandant'"
	
	ymlFile="$moduleDir/$mandant.yml"
	ymlFileInactive="$ymlFile.inactive"
	
	if [ -f "$ymlFile" ]; then
		orangeecho "   setting module in directory '$moduleDir' to inactive ..."
	
		mv "$ymlFile" "$ymlFileInactive" --verbose
		if ! [ -f "$ymlFileInactive" ]; then
			redecho "   Deactivation failed! Do I have write access to '$ymlFile'?">&2
			exit 1
		fi
		blueecho "   This operation did **not** remove"
		blueecho "   - file '$ymlFile' but set it to 'inactive'"
		blueecho "   - and also not its data directory 'data_$mandant'"
	else
		greenecho "   already set to inactive. No need to do it again :)"
	fi

	greenecho "removed trufi module '$modulename' from mandant '$mandant'"
}

for module in "${args[@]}"; do
	moduleDir="./modules/$module"
	if [ -z "$module" ]; then
		continue
	fi
	echo
	removeModule "$module"
done
